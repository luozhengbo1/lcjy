/*var oRequest = {
	ajax: function(params) { // ajax请求
		params = params || {};
		params.data = params.data || {};
		params.jsonp ? this.jsonpRun(params) : this.jsonRun(params);
	},
	jsonRun: function(params) {
		params.type = (params.type || 'GET').toUpperCase();
		params.async ? params.async : true;
		params.data = this.formatParams(params.data);
		var xhr = null;
		// 实例化XMLHttpRequest对象
		if(window.XMLHttpRequest) {
			xhr = new XMLHttpRequest();
		} else {
			// IE6及其以下版本
			xhr = new ActiveXObjcet('Microsoft.XMLHTTP');
		};

		// 监听事件
		xhr.onreadystatechange = function() {
			if(xhr.readyState == 4) {
				var status = xhr.status;
				if(status >= 200 && status < 300) {
					var response = '';
					var type = xhr.getResponseHeader('Content-type');
					if(type.indexOf('xml') !== -1 && xhr.responseXML || params.dataType == "xml" || params.dataType == "XML") {
						response = xhr.responseXML; //
					} else if(type === 'application/json' || params.dataType == "json" || params.dataType == "JSON") {
						response = JSON.parse(xhr.responseText); //JSON响应
					} else {
						response = xhr.responseText; //字符串响应
					};
					params.success && params.success(response);
				} else {
					params.error && params.error(status);
				}
			}
		};
		// 连接和传输数据
		if(params.type == 'GET') {
			xhr.open(params.type, params.url + '' + params.data, params.async);
			xhr.send(null);
		} else {
			xhr.open(params.type, params.url, params.async);
			//设置提交时的内容类型
			xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');
			xhr.send(params.data);
		}
	},
	formatParams: function(data) { //格式化参数
		var arr = [];
		for(var name in data) {
			arr.push(encodeURIComponent(name) + '=' + encodeURIComponent(data[name]));
		};
		// 添加一个随机数，防止缓存
		arr.push('v=' + this.random());
		return arr.join('&');
	},
	random: function() { // 获取随机数
		return Math.floor(Math.random() * 10000 + 500);
	},
	jsonpRun: function(params) { // jsonp请求
		//创建script标签并加入到页面中
		var callbackName = params.jsonp;
		var head = document.getElementsByTagName('head')[0];
		// 设置传递给后台的回调参数名
		params.data['callback'] = callbackName;
		var data = this.formatParams(params.data);
		var script = document.createElement('script');
		head.appendChild(script);

		//创建jsonp回调函数
		window[callbackName] = function(json) {
			head.removeChild(script);
			clearTimeout(script.timer);
			window[callbackName] = null;
			params.success && params.success(json);
		};

		//发送请求
		script.src = params.url + '?' + data;

		//超时处理
		if(params.time) {
			script.timer = setTimeout(function() {
				window[callbackName] = null;
				head.removeChild(script);
				params.error && params.error({
					message: '超时'
				});
			}, time);
		}
	},
};*/

({
	apiUrl: 'http：//t.j9zz.com/',
	init: function() {
		(!this.getUrlFileName() || this.getUrlFileName() == "index") && this.homeFileRun();
		(this.getUrlFileName() == "details") && this.detailsFileRun();
		(this.getUrlFileName() == "register") && this.regFileRun();
		(this.getUrlFileName() == "address") && this.addressFileRun();
		(this.getUrlFileName() == "register" || this.getUrlFileName() == "address") && this.removeSymbol();
	},
	httpAjax: function(params) {
		//		oRequest.ajax({
		//			url: params.url,
		//			data: params.data,
		//			dataType: 'json',
		//			success: function(result) {
		//				(result.ret == 200) && params.success(result.data);
		//			},
		//			error: function(xhr) {
		//				console.log(xhr)
		//			}
		//		});
		var _this = this;
		$.ajax({
			type: "get",
			url: params.url,
			data: params.data,
			dataType: 'json',
			xhrFields: {
				withCredentials: true
			},
			crossDomain: true,
			success: function(result) {
				if(parseInt(result.code) === 200) {
					params.success(result);
				} else {
					result.msg && _this.showMsg(result.msg);
				}
			},
			error: function(xhr) {
				console.log(xhr)
			}
		});
	},
	homeFileRun: function() {
		var _this = this,
			swiper = null;

		function getSwiper(id) {
			_this.httpAjax({
				url: _this.apiUrl + 'index',
				data: {
					cate: id
				},
				success: function(result) {
					var swiperData = template('swiperTabList', result.data);
					document.getElementById('swiper-tab-list').innerHTML = swiperData;
				}
			});
		}
		getSwiper(1);
		swiper = new Swiper('.swiper-container', {
			slidesPerView: 4,
			spaceBetween: '1.5%',
			observer: true,
			observeParents: true,
		});
		var tabHead = document.getElementById("tab-head"),
			tabHeadLi = tabHead.getElementsByTagName("li");
		this.tabHeadTreat(tabHeadLi, function(cur, index) {
			getSwiper(index + 1);
		});
		//		window.onload = function() {
		//			document.getElementById("loadtip").style.display = "none";
		//		}
	},
	detailsFileRun: function() {
		var _this = this;
		this.httpAjax({
			url: _this.apiUrl + 'detail',
			data: {
				id: _this.getQueryString('id')
			},
			success: function(result) {
				var detailsData = template('proDetails', result.data);
				document.getElementById('details').innerHTML = detailsData;
				var rawpulpType = document.getElementById("rawpulp-type"),
					rawpulpTypeLi = rawpulpType.getElementsByTagName("li"),
					martPrice = document.getElementById("martprice"),
					vipPrice = document.getElementById("vipprice");
				_this.tabHeadTreat(rawpulpTypeLi, function(cur) {
					martPrice.textContent = cur.dataset.martprice;
					vipPrice.textContent = cur.dataset.vipprice;
				});
			}
		});
	},
	regFileRun: function() {
		var phone = document.getElementById("phone"),
			vercode = document.getElementById("vercode"),
			btnsubmit = document.getElementById('submit'),
			btnVercode = document.getElementById("btn-vercode"),
			_this=this;
		this.verPhone = function(callback) {
			var phoneVal = phone.value;
			if(phoneVal == "" || phoneVal == null) {
				this.showMsg("请输入机号！");
				phone.focus();
			}
			//			else if(!(/^13[0-9]{9}$|14[0-9]{9}|15[0-9]{9}$|18[0-9]{9}$/.test(phoneVal))) {
			else if(phoneVal.length !== 11) {
				this.showMsg("手机号码格式不对<br />请输入11位手机号码！");
				phone.focus();
			} else {
				callback(phoneVal)
			}
		}.bind(this);
		btnsubmit.onclick = function() { //提交表单
			var vercodeVal = vercode.value;
			this.verPhone(function(phone) {
				if(vercodeVal == "" || vercodeVal == null) {
					this.showMsg("请输入验证码！");
					vercode.focus();
				} else if(vercodeVal.length !== 4) {
					this.showMsg("验证码格式错误！");
					vercode.focus();
				}else {
					this.httpAjax({
						url: _this.apiUrl + 'verify',
						data: {
							no: phone,
							num: vercodeVal,
						},
						success: function(data) {
							console.log(data)
							_this.showMsg("注册成功，我们会尽快与您联系！");
							window.location.reload();
						}
					})
				}
			}.bind(this))
		}.bind(this);
		btnVercode.onclick = function() { //获取验证码
			this.verPhone(function(phone) {
				this.httpAjax({
                    url: _this.apiUrl + 'api/sms/sendcode',
                    data: {
						mobile: phone,
						type:1,
					},
					success:function (res) {
						alert(res.msg)
                    }
				})
				this.verifyTime(btnVercode)
			}.bind(this));
		}.bind(this)
	},
	addressFileRun: function() {
		var user = document.getElementById("user"),
			sMap = document.getElementById("map"),
			submitFrom = document.getElementById('submit-form');
		submitFrom.onclick = function() { //地址表单
			var userVal = user.value,
				sMapVal = sMap.value;
			if(userVal == "" || userVal == null) {
				this.showMsg("请输入您的姓名！");
				user.focus();
			} else if(!(/^[\u4E00-\u9FA5\uf900-\ufa2d\w\.\s]{2,6}$/.test(userVal))) {
				this.showMsg("姓名为2~6个字符！");
				user.focus();
			} else if(sMapVal == "" || sMapVal == null) {
				this.showMsg("请输入收货地址！");
				sMap.focus();
			} else if(!(/^[\u4E00-\u9FA5\uf900-\ufa2d\w\.\s]{2,30}$/.test(sMapVal))) {
				this.showMsg("收货地址为2~30个字符！");
				sMap.focus();
			} else {

			}
		}.bind(this);
	},
	getQueryString: function(key) { //正则获取url后面的参数值
		var reg = new RegExp("(^|&)" + key + "=([^&]*)(&|$)"),
			result = window.location.search.substr(1).match(reg);
		return result ? decodeURIComponent(result[2]) : null;
	},
	totalTime: 5,
	verifyTime: function(el) {
		if(this.totalTime == 0) {
			clearTimeout(this.setTime);
			el.removeAttribute("disabled");
			el.textContent = '获取验证码';
			this.totalTime = 5;
			return;
		} else {
			el.setAttribute("disabled", true);
			el.textContent = this.totalTime + 's';
			this.totalTime--;
		}
		this.setTime = setTimeout(function() {
			this.verifyTime(el);
		}.bind(this), 1000);
	},
	tabHeadTreat: function(el, callback) {
		var that = this;
		for(var i = 0; i < el.length; i++) {
			(function(e) {
				el[e].onclick = function() {
					if(!that.hasClass(this, 'tab-head-active')) {
						that.addClass(this, 'tab-head-active');
						that.siblings(this).forEach(function(el, index) {
							that.removeClass(el, 'tab-head-active');
						})
						callback && callback(this, e);
					}
				}
			})(i)
		}
	},
	addClass: function(el, cls) {
		if(!this.hasClass(el, cls)) {
			el.className += ' ' + cls;
		}
	},
	hasClass: function(el, cls) {
		return el.className.match(new RegExp('(\\s|^)(' + cls + ')(\\s|$)'));
	},
	removeClass: function(el, cls) {
		if(this.hasClass(el, cls)) {
			el.className = el.className.replace(RegExp('(\\s|^)(' + cls + ')(\\s|$)'), '$3');
		}
	},
	siblings: function(el) {
		return [].filter.call(el.parentNode.children, function(child) {
			return child !== el;
		});
	},
	getUrlFileName: function() {
		var url = window.location.pathname, //url的路径部分(就是文件地址)
			pos = url.lastIndexOf("/"),
			filename = url.substr(pos + 1).split("."); //把参数和文件名分割开
		return filename[0];
	},
	showMsg: function(msg) {
		this.tipTime && clearTimeout(this.tipTime);
		const formMsg = document.getElementById("form-msg");
		if(!formMsg) {
			const sDiv = document.createElement('div');
			sDiv.id = 'form-msg';
			sDiv.className = 'tc form-msg';
			sDiv.innerHTML = "<div layout-align='center center' layout>" + msg + "<div>";
			//			sDiv.setAttribute('layout-align','center center');
			//			sDiv.setAttribute('layout','');
			document.getElementsByTagName("body")[0].appendChild(sDiv);
		} else {
			formMsg.style.display = 'block';
			formMsg.innerHTML = "<div layout-align='center center' layout>" + msg + "<div>";
		}
		this.tipTime = setTimeout(function() {
			document.getElementById("form-msg").style.display = 'none';
		}, 1000);
	},
	removeSymbol: function() { //去掉输入框的字符 and 空格
		var ipt = document.getElementsByClassName("ipt");
		for(var i = 0; i < ipt.length; i++) {
			(function(e) {
				this.addEvent(ipt[e], 'keyup', function() {
					if(this.hasClass(ipt[e], 'com-ipt')) {
						ipt[e].value = ipt[e].value.replace(/\D|^0/g, '').replace(/\s/g, '');
					} else {
						ipt[e].value = ipt[e].value.replace(/\s/g, '');
					}
				})
			}.bind(this))(i)
		}
	},
	addEvent: function(obj, type, fn) { //添加事件监听，三个参数分别为 对象、事件类型、事件处理函数，默认为false
		if(obj.addEventListener) {
			obj.addEventListener(type, fn.bind(this), false); //非IE
		} else {
			obj.attachEvent('on' + type, fn.bind(this)); //ie,这里已经加上on，传参的时候注意不要重复加了
		};
	},
}).init();